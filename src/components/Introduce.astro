---
title: "Introduce"

import SplitText from "./animations/SplitText/SplitText.tsx";
import Skill from "./Skill.astro";
import Project from "./Project.astro";
import ShinyText from "./animations/ShinyText/ShinyText.tsx";
import PDFViewer from "./PDFViewer.tsx";
import { Icon } from 'astro-icon/components';

const test = () => {
    console.log("test");
}
---
<div class="max-w-6xl mx-auto px-6 py-12">
    <div class="text-center mb-16">
        <div class="flex justify-end mb-4">
            <button
                id="theme-toggle"
                class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                aria-label="Toggle dark mode"
            >
                <Icon name="mdi:weather-sunny" class="w-6 h-6 text-gray-800 dark:text-gray-200 hidden dark:block" />
                <Icon name="mdi:weather-night" class="w-6 h-6 text-gray-800 dark:text-gray-200 block dark:hidden" />
            </button>
        </div>
        <SplitText
            client:load
            text="LiverHawk"
            className="text-5xl font-bold text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text"
            delay={100}
            duration={0.6}
            ease="power3.out"
            splitType="chars"
            from={{ opacity: 0, y: 40 }}
            to={{ opacity: 1, y: 0 }}
            threshold={0.1}
            rootMargin="-100px"
            textAlign="center"
            onLetterAnimationComplete={test}
        />
        <p class="mt-6 text-lg text-gray-600 dark:text-gray-400 leading-relaxed max-w-2xl mx-auto">
            I'm a software engineer with a passion for building web applications.
            <br />
            And I'm a graduate student at the Osaka Metropolitan University.
        </p>
    </div>
    
    <div class="space-y-16">
        <section class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 transition-all hover:shadow-xl">
            <div class="flex space-x-4 mb-8 border-b border-gray-200 dark:border-gray-700">
                <button
                    class="px-6 py-3 text-lg font-medium text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 border-b-2 border-transparent hover:border-blue-600 dark:hover:border-blue-400 transition-colors"
                    data-tab="skills"
                >
                    スキル
                </button>
                <button
                    class="px-6 py-3 text-lg font-medium text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 border-b-2 border-transparent hover:border-blue-600 dark:hover:border-blue-400 transition-colors"
                    data-tab="projects"
                >
                    プロジェクト
                </button>
            </div>

            <div id="skills-content" class="tab-content hidden">
                <Skill />
            </div>

            <div id="projects-content" class="tab-content">
                <Project />
            </div>
        </section>
    </div>
</div>

<script>
    // タブ切り替えのロジック
    const tabs = document.querySelectorAll('[data-tab]');
    const contents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // アクティブなタブのスタイルを更新
            tabs.forEach(t => t.classList.remove('border-blue-600', 'text-blue-600'));
            tab.classList.add('border-blue-600', 'text-blue-600');
            // コンテンツの表示/非表示を切り替え
            const targetId = `${(tab as HTMLElement).dataset.tab}-content`;
            contents.forEach(content => {
                content.classList.add('hidden');
                if (content.id === targetId) {
                    content.classList.remove('hidden');
                }
            });
        });
    });
    // 初期状態でスキルタブをアクティブに
    (tabs[0] as HTMLElement).click();

    // ダークモード切り替えのロジック
    const themeToggle = document.getElementById('theme-toggle');
    const html = document.documentElement;

    // システムの設定を確認
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    // ローカルストレージから保存された設定を取得
    const savedTheme = localStorage.getItem('theme');
    
    // 初期テーマの設定
    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        html.classList.add('dark');
    }

    // テーマ切り替えボタンのクリックイベント
    themeToggle?.addEventListener('click', () => {
        if (html.classList.contains('dark')) {
            html.classList.remove('dark');
            localStorage.setItem('theme', 'light');
        } else {
            html.classList.add('dark');
            localStorage.setItem('theme', 'dark');
        }
    });
</script>
